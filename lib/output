#!/bin/bash

# EXAMPLE:
# --------
#
# setOutputContentType "log:stdout"
# setOutputContentType "log:/path/to/log/test.log"
# setOutputContentType "json:/path/to/json/test.json"
#
# outputContent "ports"          "caption" "Die Beschreibung für den Port Bereich."
# outputContent "ports.80"       "success" "Port 80 ist offen."
# outputContent "ports.443"      "success" "Port 443 ist offen."
# outputContent "ports.111"      "failed"  "Port 111 ist geöffnet."
# outputContent "status"         "caption" "Status Code Beschreibung."
# outputContent "status.typo3"   "success" "Der Typo3 Pfad Test war erfolgreich."
# outputContent "ssl.nonwww"     "success" "The certificate is valid"
# outputContent "ssl.www"        "success" "The certificate is valid"
# outputContent "ssl.www.check2" "success" "The certificate 2 is valid"
# outputContent "ssl.www.check3" "success" "The certificate 3 is valid"
# outputFinish
#

# some vars
currentNamespacePath=""
lastOpenNr=-1
outputType="json"
availableOutputTypes=(json log)
outputSetting=()
outputStandard='log:stdout'

# ------------
# Output content type setter.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-04-10)
# ------------
setOutputContentType()
{
    local setting="$1"

    IFS=':' read -ra settingArray <<< "$setting"

    local    outputClass="${settingArray[0]^^}"
    local outputLocation="${settingArray[1]}"

    # check if stdout is already available
    if [ "$outputLocation" == "stdout" ]; then
        for setting in "${outputSetting[@]}"; do
            IFS=':' read -ra settingArray <<< "$setting"
            if [ "${settingArray[1]}" == "stdout" ]; then
                echo -e "${COLOR_RED}${COLOR_BOLD}setOutputContentType: Only one stdout stream is available. Don't use it multiple.${COLOR_NORM}"
                exit
            fi
        done
    fi

    # check available types
    for availableOutputType in "${availableOutputTypes[@]}"; do
        if [ "${availableOutputType^^}" == "$outputClass" ]; then
            if [ "$outputLocation" != "stdout" ]; then
                append=false

                # append
                if [ "${outputLocation:0:2}" == ">>" ]; then
                    outputLocation="${outputLocation: -${#outputLocation}+2}"
                    append=true
                fi

                # new
                if [ "${outputLocation:0:1}" == ">" ]; then
                    outputLocation="${outputLocation: -${#outputLocation}+1}"
                fi

                local outputDirectory=$(dirname "$outputLocation")

                # check log directory
                if [ ! -d "$outputDirectory" ]; then
                    echo -e "${COLOR_RED}${COLOR_BOLD}setOutputContentType: The directory \"$outputDirectory\" is not available.${COLOR_NORM}"
                    exit
                fi

                # check if directory is writeable
                if [ ! -w "$outputDirectory" ]; then
                    echo -e "${COLOR_RED}${COLOR_BOLD}setOutputContentType: The directory \"$outputDirectory\" is not writeable.${COLOR_NORM}"
                    exit
                fi

                # prepare log file
                if $append; then
                    touch "$outputLocation"
                else
                    echo -n "" > "$outputLocation"
                fi

                if [ ! -f "$outputLocation" ]; then
                    echo -e "${COLOR_RED}${COLOR_BOLD}setOutputContentType: Was not able to create log file \"$outputLocation\".${COLOR_NORM}"
                fi
            fi

            outputSetting+=("${outputClass,,}:$outputLocation")
            return 0
        fi
    done

    echo "Unknown given type \"${settingArray[0]}\"."
    exit
}

# ------------
# Output content switch
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-04-10)
# ------------
outputContent()
{
    local outputLast=${6:-false}

    for setting in "${outputSetting[@]}"; do
        IFS=':' read -ra settingArray <<< "$setting"

        _doOutputContent "${settingArray[0]}" "${settingArray[1]}" "$1" "$2" "$3" "$4" "$5" $outputLast
    done
}

# ------------
# Output content function: closer
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-04-10)
# ------------
outputFinish()
{
    outputContent "$1" "$2" "$3" "$4" "$5" true
}

# ------------
# Do the output content switch
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-04-12)
# ------------
_doOutputContent()
{
    local outputClass="${1^^}"
    local outputLocation="$2"
    local output=""
    local outputLast=${8:-false}

    case "$outputClass" in
        JSON)
            _outputContentJson output "$3" "$4" "$5" "$6" "$7"
            if $outputLast; then
                output+=$(outputIdent 1 "}")$'\n'
                output+=$(outputIdent 0 "}")$'\n'
            fi
            ;;

        LOG)
            _outputContentLog output "$3" "$4" "$5" "$6" "$7"
            ;;

        *)
            echo "Unknown given type \"${outputType^^}\"."
            return 1
            ;;
    esac

    if [ "$output" != "" ]; then
        if [ "$outputLocation" == "stdout" ]; then
            echo -en "$output"
        else
            # create file if it does not exist
            if [ ! -f "$outputLocation" ]; then
                touch "$outputLocation"
            fi

            # remove colors
            if [ "$outputClass" != "JSON" ]; then
                output=$(echo -e "$output" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" | sed -E ':a;N;$!ba;s/\r{0,1}\n/\\n/g')
            fi

            # compress json
            if [ "$outputClass" == "JSON" ]; then
                output=$(echo -n "$output" | sed 's/^[ \t]*//' | sed ':a;N;$!ba;s/\n//g')
            fi

            echo -en "$output" >> "$outputLocation"
        fi
    fi
    return 0
}

# ------------
# Output content function: log
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-04-10)
# ------------
_outputContentLog()
{
    local         _resultvar="$1"
    local      namespacePath="$2"
    local             status="${3^^}"
    local            logText="$4"
    local              debug=${5:-false}
    local              ident=${6:-4}
    local            showLog=${7:-false}
    local               date=`date "+%Y-%m-%d %H:%M:%S"`
    local      numberOfLines=$(echo -e "$logText" | wc -l)
    local multilineSignFirst='┏━  '
    local      multilineSign='┃   '
    local  multilineSignLast='┗━  '
    local             spacer=''
    local        returnValue=''

    if [ "$status" == "" ]; then
        return 0
    fi

    # disabled output
    if $showLog; then
        return 0
    fi

    case "$status" in
        SUCCESS)
            status="$COLOR_GREEN$status\033[0m"
            ;;
        PASSED)
            status="\033[1;32m"$status"\033[0m"
            spacer=' '
            ;;
        WARNING)
            status="\033[1;33m\033[5m"$status"\033[0m"
            ;;
        ERROR)
            status="\033[1;31m\033[5m"$status"\033[0m"
            spacer='  '
            ;;
        FAILED)
            status="\033[1;31m\033[5m"$status"\033[0m"
            spacer=' '
            ;;
        INFO)
            status="\033[1;36m"$status"\033[0m"
            spacer='   '
            ;;
        REMOTE)
            status="\033[1;35m"$status"\033[0m"
            spacer=' '
            ;;
        HEADER)
            status="\033[1;34m"$status"\033[0m"
            logText=${logText^^}
            spacer=' '
            ;;
        CAPTION)
            status="\033[1;34m"$status"\033[0m"
            logText=${logText^^}
            ;;
    esac

    # check multiline && replace line breaks
    if [ "$numberOfLines" -gt 1 ]; then
        logText="$multilineSignFirst$logText"
        logText=$(echo -en "$logText" | sed ":a;N;\$!ba;s/\\n/\\n                                $multilineSign/g")
        logText=$(echo -en "$logText" | sed '$s/┃ /┗━/g')
    fi

    returnValue+=$(echo -e "[$date] [$status]$spacer $logText")$'\n'

    eval $_resultvar="'$returnValue'"
}

# ------------
# Output content function: json
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-04-10)
# ------------
_outputContentJson()
{
    local         _resultvar="$1"
    local      namespacePath="root.$2"
    local             status="$3"
    local        description=$(echo -e "$4" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" | sed -E ':a;N;$!ba;s/\r{0,1}\n/\\n/g' | sed 's/\\n/\\\\n/g')
    local              debug=${5:-false}
    local              ident=${6:-4}
    local          timestamp=$(date +"%s")
    local       timeFormated=$(date -d @$timestamp)
    local        returnValue=''

    IFS='.' read -r -a namespaceArray        <<< "$namespacePath"
    IFS='.' read -r -a currentNamespaceArray <<< "$currentNamespacePath"

    local uniquePath=""
    local unique=true

    if $debug; then
        printf "1) current:     %-40s %4s\n" "\"$currentNamespacePath\"" "(${#currentNamespaceArray[@]})"
    fi

    for namespaceName in "${currentNamespaceArray[@]}"; do
        [ "$uniquePath" == "" ] && local newUniquePath="$namespaceName" || local newUniquePath="$uniquePath.$namespaceName"

        if $unique; then
            if [[ "$namespacePath" =~ ^$newUniquePath ]] ; then
                uniquePath="$newUniquePath"
            else
                unique=false
            fi
        fi
    done

    if $debug; then
        printf "2) wanted:      %-40s %4s\n" "\"$namespacePath\"" "(${#namespaceArray[@]})"
    fi

    IFS='.' read -r -a uniqueArray <<< "$uniquePath"

    if $debug; then
        printf "3) unique path: %-40s %4s\n" "\"$uniquePath\"" "(${#uniqueArray[@]})"
    fi

    local closeNamespacePath=$(echo $currentNamespacePath | sed -e "s/^${uniquePath}[\.]\?//g" )
    local  openNamespacePath=$(echo $namespacePath        | sed -e "s/^${uniquePath}[\.]\?//g" )

    IFS='.' read -r -a closeNamespaceArray <<< "$closeNamespacePath"
    IFS='.' read -r -a  openNamespaceArray <<< "$openNamespacePath"

    local closeFromNumber="${#currentNamespaceArray[@]}"
    local closeToNumber=$((closeFromNumber - ${#closeNamespaceArray[@]}))
    local closeSum="${#closeNamespaceArray[@]}"
    local closeString=''

    if [ $closeFromNumber -gt $closeToNumber ]; then
        for ((i=$closeFromNumber; i>$closeToNumber; i--)); do
            [ "$closeString" != '' ] && closeString+=', '
            closeString+=$i
        done
    else
        closeString='---'
    fi

    if $debug; then
        printf "4) todo close:  %-40s %4s %s\n" "\"$closeNamespacePath\"" "(${#closeNamespaceArray[@]})" "($closeFromNumber -> $closeToNumber | $closeString)"
    fi

    local openFromNumber="${#uniqueArray[@]}"
    local openToNumber=$((openFromNumber + ${#openNamespaceArray[@]}))
    local openSum="${#openNamespaceArray[@]}"
    local openString=''

    if [ $openToNumber -gt $openFromNumber ]; then
        for ((i=$((openFromNumber+1)); i<=$openToNumber; i++)); do
            [ "$openString" != '' ] && openString+=', '
            openString+=$i
        done
    else
        openString='---'
    fi

    if $debug; then
        printf "5) todo open:   %-40s %4s %s\n" "\"$openNamespacePath\""  "(${#openNamespaceArray[@]})"  "($openFromNumber -> $openToNumber | $openString)"
    fi

    # print close tags
    if [ $closeFromNumber -gt $closeToNumber ]; then
        for ((i=$((closeFromNumber - 1)); i>$((closeToNumber - 1)); i--)); do
            if [ $lastOpenNr -gt 0 ]; then
                returnValue+=$'\n'
            fi

            returnValue+=$(outputIdent $((2 * i + 0)) "}" false)

            if [ $i -eq $closeToNumber ]; then
                if [ $i -ne $openFromNumber ] && [ $openToNumber -gt $openFromNumber ]; then
                    returnValue+=$'\n'
                    returnValue+=$(outputIdent $((2 * i - 1)) "}" false)
                fi
            else
                returnValue+=$'\n'
                returnValue+=$(outputIdent $((2 * i - 1)) "}" false)
            fi
        done
    fi

    # print open tags 
    if [ $openToNumber -gt $openFromNumber ]; then
        for ((i=$openFromNumber; i<=$((openToNumber - 1)); i++)); do
            if [ $i -gt 0 ]; then
                if [ $closeToNumber -eq $openFromNumber ] && [ $closeFromNumber -gt $closeToNumber ] && [ $i -eq $openFromNumber ]; then
                    returnValue+=','$'\n'
                    returnValue+=$(outputIdent $((2 * i + 0)) "\"${namespaceArray[i]}\": {")$'\n'
                else
                    returnValue+=','$'\n'
                    returnValue+=$(outputIdent $((2 * i - 1)) "\"data\": {")$'\n'
                    returnValue+=$(outputIdent $((2 * i + 0)) "\"${namespaceArray[i]}\": {")$'\n'
                fi
            else
                returnValue+=$(outputIdent $((2 * i + 0)) "{")$'\n'
            fi

            local namepath=""
            local namepathShort=""
            for ((j=0; j<${#namespaceArray[@]}; j++)); do
                [ $j -gt $i ] && continue
                [ "$namepath" != "" ] && namepath+="."
                namepath+="${namespaceArray[$j]}"
                if [ "${namespaceArray[$j]}" != "root" ]; then
                    [ "$namepathShort" != "" ] && namepathShort+="."
                    namepathShort+="${namespaceArray[$j]}"
                fi
            done

            returnValue+=$(outputIdent $((2 * i + 1)) "\"path\": \"$namepath\"" false)

            if [ "$namepathShort" != "" ]; then
                returnValue+=','$'\n'
                returnValue+=$(outputIdent $((2 * i + 1)) "\"pathShort\": \"$namepathShort\"" false)
            fi

            # if last opened area: print status and description if given
            if [ $i -eq $((openToNumber - 1)) ]; then
                if [ "$status" != "" ] && [ "$status" != "caption" ]; then
                    returnValue+=','$'\n'
                    returnValue+=$(outputIdent $((2 * i + 1)) "\"status\": \"$status\"" false)
                fi

                if [ "$description" != "" ]; then
                    returnValue+=','$'\n'
                    returnValue+=$(outputIdent $((2 * i + 1)) "\"description\": \"$description\"" false)
                fi
            fi

            if [ $i -lt 1 ]; then
                returnValue+=','$'\n'
                returnValue+=$(outputIdent $((2 * i + 1)) "\"timestamp\": \"$timestamp\"" false)

                returnValue+=','$'\n'
                returnValue+=$(outputIdent $((2 * i + 1)) "\"timeFormated\": \"$timeFormated\"" false)

                returnValue+=','$'\n'
                returnValue+=$(outputIdent $((2 * i + 1)) "\"creator\": \"$BASH_LIB_NAME $BASH_LIB_VERSION\"" false)
            fi

            lastOpenNr=$i
        done
    else
        if [ $closeFromNumber -gt $closeToNumber ]; then
            returnValue+=$'\n'
        fi
    fi

    currentNamespacePath="$namespacePath"

    if $debug; then
        echo
    fi

    eval $_resultvar="'$returnValue'"
}

# ------------
# Output content helper function: outputIdent
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-04-10)
# ------------
outputIdent()
{
    local identNr=${1:-0}
    local text="${2:-}"
    local linebreak=${3:-true}
    local identChar=${4:- }
    local ident=4

    if [ $identNr -gt 0 ]; then
        printf "%-$((identNr * $ident))s" "$identChar"
    fi

    if $linebreak; then
        echo "$text"
    else
        echo -n "$text"
    fi
}

