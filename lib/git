#!/bin/bash

# ------------
# Returns the working tree parameter name.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-06-05)
# ------------
getWorkingTreeParameterName()
{
    git --help | grep "\-C <path>" | \
        { read ret; [ "$ret" == "" ] && echo "-work-tree" || echo "C"; }
}

# ------------
# Normalize the given tags result.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-21)
# ------------
normalizeTagResult()
{   
    local tagResult="$1"
    local filter="$2"
    
    local normalizedTagResult=$(echo "$tagResult" | \
        awk '{print $2}' | \
        cut -d '/' -f 3 | \
        cut -d '^' -f 1  | \
        uniq)
    
    # filter the result
    if [ "$filter" != "" ]; then
        normalizedTagResult=$(echo "$normalizedTagResult" | grep "\-$filter" --color=never)
    fi
    
    echo "$normalizedTagResult"
}

# ------------
# Gets the last staging or prod tag
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-21)
# ------------
getLastTagByGivenList()
{
    local maxVersion=""

    for version in $(normalizeTagResult "$1" "$2"); do
        if [ "$maxVersion" == "" ]; then
            maxVersion="$version"
        fi

        if compareVersionIsGreater "$version" "$maxVersion"; then
            maxVersion="$version"
        fi
    done

    echo "$maxVersion" | xargs
}

# ------------
# Gets the last staging or prod tag
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-21)
# ------------
getLastTagByGivenRepository()
{
    local gitRepo="$1"
    local filter="$2"

    local tagResult=$(git ls-remote -t "$gitRepo")

    local tagName=$(getLastTagByGivenList "$tagResult" "$filter")

    if [ "$tagName" == "" ]; then
        echo "v0.0.0"
    fi

    echo "$tagName"
}

# ------------
# Gets the current local tag
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-21)
# ------------
getCurrentTagFromGivenPath()
{
    local gitDir="$1"

    if [ "$gitDir" == "" ]; then
        gitDir=$(pwd)
    fi

    local workingTreeParameterName=$(getWorkingTreeParameterName)

    local tagName=$(git -$workingTreeParameterName "$gitDir" describe 2>/dev/null | xargs | sed 's~-[0-9]\+-[A-Za-z0-9]\+$~~')

    if [ "$tagName" == "" ]; then
        echo "v0.0.0"
    fi

    echo "$tagName"
}

# ------------
# Gets the last changeset hash from given repository.
# This method doesn't work with sudo (without -E),
# because the git private key is needed.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-21)
# ------------
getLastChangesetFromGivenRepository()
{
    git ls-remote "$1" | head -1 | sed "s/HEAD//" | xargs
}

# ------------
# Gets the last remote changeset from connected repository of given path.
# This method doesn't need a private key for github access.
# It's even usable with sudo (even without the -E parameter).
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-21)
# ------------
getLastRemoteChangesetFromGivenPath()
{
    local gitDir="$1"

    if [ "$gitDir" == "" ]; then
        gitDir=$(pwd)
    fi

    eval "declare -A repositoryValues="$(getRepositoryValues "$gitDir")
    [ $? -gt 0 ] && (>&2 echo "→ abort") && exit

    local nameRepository="${repositoryValues[name]}"
    local gitBranch="${repositoryValues[branch]}"
    local nameAuthor="${repositoryValues[author]}"

    local githubUrl="https://api.github.com/repos/$nameAuthor/$nameRepository/git/refs/heads/$gitBranch"
    local      json=$(curl -s "$githubUrl")
    local   message=$(echo "$json" | jq '.message' | tr -d '"')

    if [ "$message" == "Not Found" ]; then
        >&2 echo "The git head $gitBranch was not found ($githubUrl)."
        return 1
    fi

    echo "$json" | jq '.object.sha' | tr -d '"'
}

# ------------
# Gets the current changeset from local installation
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-21)
# ------------
getCurrentChangesetFromGivenPath()
{
    local gitDir="$1"

    if [ "$gitDir" == "" ]; then
        gitDir=$(pwd)
    fi

    local workingTreeParameterName=$(getWorkingTreeParameterName)

    git -$workingTreeParameterName "$gitDir" rev-parse HEAD | xargs
}

# ------------
# Gets the current branchname from local installation
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-06-05)
# ------------
getCurrentBranchFromGivenPath()
{
    local gitDir="$1"

    if [ "$gitDir" == "" ]; then
        gitDir=$(pwd)
    fi

    local workingTreeParameterName=$(getWorkingTreeParameterName)

    git -$workingTreeParameterName "$gitDir" branch | grep "^\*" | sed 's/^\* //'
}

# ------------
# Gets the version number of this library.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-30)
# ------------
getRepositoryVersion()
{
    local pathRoot="$1"

    eval "declare -A repositoryValues="$(getRepositoryValues "$pathRoot")
    [ $? -gt 0 ] && (>&2 echo "→ abort") && exit

    local gitRepository="${repositoryValues[git]}"
    local nameRepository="${repositoryValues[name]}"

    local localHash=$(getCurrentChangesetFromGivenPath "$pathRoot")
    local localVersion=$(getCurrentTagFromGivenPath "$pathRoot")

    echo "$nameRepository/$localVersion"
}

# ------------
# Extract the name from the given repository.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-06-03)
# ------------
getRepositoryNameFromGivenRepository()
{
    if [[ "$1" =~ ([a-zA-Z0-9._-]+)(.git$) ]]; then
        echo -n "${BASH_REMATCH[1]}"
        return 0
    fi

    >&2 echo "Error: no repository name was found"
    return 1
}

# ------------
# Extract the author name from the given repository.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-06-05)
# ------------
getNameAuthorFromGivenRepository()
{
    local authorName=$(echo "$1" | grep -oP '^[^:]+:\K[^/]+')

    if [ "$authorName" != "" ]; then
        echo -n "$authorName"
        return 0
    fi

    >&2 echo "Error: no author name was found"
    return 1
}

# ------------
# Gets some repository values.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-30)
# ------------
getRepositoryValues()
{
    local pathRoot="$1"

    local  gitRepository=""
    local nameRepository=""

    # try to get the git repository source and the name of that repository
    if [ -f "$pathRoot/.git/config" ]; then
         gitRepository=$(cat "$pathRoot/.git/config" | grep "url =" | awk '{print $3}')
        nameRepository=$(getRepositoryNameFromGivenRepository "$gitRepository")
             gitBranch=$(getCurrentBranchFromGivenPath "$pathRoot")
            nameAuthor=$(getNameAuthorFromGivenRepository "$gitRepository")
    else
         gitRepository=""
        nameRepository=""
             gitBranch=""
            nameAuthor=""
    fi

    # check git repository config
    if [ "$gitRepository" == "" ]; then
        >&2 echo "Error: no git repository config found"
        return 1
    fi

    # check git name
    if [ "$nameRepository" == "" ]; then
        >&2 echo "Error: not able to extract the name of repository"
        return 2
    fi

    declare -A ret=()

      ret[name]="$nameRepository"
       ret[git]="$gitRepository"
    ret[branch]="$gitBranch"
    ret[author]="$nameAuthor"

    local retDeclare=$(declare -p ret)

    echo "${retDeclare#*=}"

    return 0
}

