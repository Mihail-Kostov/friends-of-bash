#!/bin/bash

# ------------
# Normalize the given tags result.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-21)
# ------------
normalizeTagResult ()
{   
    local tagResult="$1"
    local filter="$2"
    
    local normalizedTagResult=$(echo "$tagResult" | \
        awk '{print $2}' | \
        cut -d '/' -f 3 | \
        cut -d '^' -f 1  | \
        uniq)
    
    # filter the result
    if [ "$filter" != "" ]; then
        normalizedTagResult=$(echo "$normalizedTagResult" | grep "\-$filter" --color=never)
    fi
    
    echo "$normalizedTagResult"
}

# ------------
# Gets the last staging or prod tag
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-21)
# ------------
getLastTagByGivenList ()
{
    local maxVersion=""

    for version in $(normalizeTagResult "$1" "$2"); do
        if [ "$maxVersion" == "" ]; then
            maxVersion="$version"
        fi

        if compareVersionIsGreater "$version" "$maxVersion"; then
            maxVersion="$version"
        fi
    done

    echo "$maxVersion" | xargs
}

# ------------
# Gets the last staging or prod tag
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-21)
# ------------
getLastTagByGivenRepository ()
{
    local gitRepo="$1"
    local filter="$2"

    local tagResult=$(git ls-remote -t "$gitRepo")

    local tagName=$(getLastTagByGivenList "$tagResult" "$filter")

    if [ "$tagName" == "" ]; then
        echo "v0.0.0"
    fi

    echo "$tagName"
}

# ------------
# Gets the current local tag
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-21)
# ------------
getCurrentTagFromGivenPath ()
{
    local gitDir="$1"

    if [ "$gitDir" == "" ]; then
        gitDir=$(pwd)
    fi

    local tagName=$(git -C "$gitDir" describe 2>/dev/null | xargs | sed 's~-[0-9]\+-[A-Za-z0-9]\+$~~')

    if [ "$tagName" == "" ]; then
        echo "v0.0.0"
    fi

    echo "$tagName"
}

# ------------
# Gets the last changeset hash from given repository
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-21)
# ------------
getLastChangesetFromGivenRepository ()
{
    git ls-remote "$1" | head -1 | sed "s/HEAD//" | xargs
}

# ------------
# Gets the current changeset from local installation
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-21)
# ------------
getCurrentChangesetFromGivenPath ()
{
    local gitDir="$1"

    if [ "$gitDir" == "" ]; then
        gitDir=$(pwd)
    fi

    git -C "$gitDir" rev-parse HEAD | xargs
}

