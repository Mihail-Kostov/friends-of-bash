#!/bin/bash


isPingableCheck()
{
    ip="$1"

    if isPingable "$ip"; then
        log 'passed' "The system with ip $ip is running"
        return 0
    else
        log 'failed' "The system with ip $ip is not pingable"
        return 1
    fi
}


isPortOpenCheck()
{
    ip="$1"
    port="$2"

    if isPortOpen "$ip" "$port"; then
        log 'passed' "The port \"$port\" on system with ip \"$ip\" is open."
        return 0
    else
        log 'failed' "The port \"$port\" on system with ip \"$ip\" is not open."
        return 1
    fi
}

isNotPortOpenCheck()
{
    if ! isPortOpen "$ip" "$port"; then
        log 'passed' "The port \"$port\" on system with ip \"$ip\" is closed."
        return 0
    else
        log 'failed' "The port \"$port\" on system with ip \"$ip\" is not closed."
        return 1
    fi
}

isHttpStatusCodeCheck()
{
    local                 url="$1"
    local expectedStatusCodes="$2"

    read returnedStatusCode comparison < <(getHttpStatusCodeFromUrl "$url")

    # split status code
    IFS=',' read -ra statusCodeArray <<< "$expectedStatusCodes"

    local portString=""
    local statusCodeComparator
    if [ ${#statusCodeArray[@]} -gt 1 ]; then
        for statusCodeComparator in "${statusCodeArray[@]}"; do
            if [ "$portString" != "" ]; then
                portString="$portString, "
            fi

            local statusCode=$(getIndexFromStringSeparatedBySeparator "$statusCodeComparator" "=" 0)

            portString="$portString$statusCode"
        done
    fi

    if [ "$portString" != "" ]; then
        portString=" (one of the expected ports: $portString)"
    fi

    # check status code and comparator
    for statusCodeComparator in "${statusCodeArray[@]}"; do

        # split status code
        local statusCode=$(getIndexFromStringSeparatedBySeparator "$statusCodeComparator" "=" 0)
        local comparator=$(getIndexFromStringSeparatedBySeparator "$statusCodeComparator" "=" 1)

        if [ "$statusCode" == "$returnedStatusCode" ]; then

            # status code match, but comparator mismatch
            if [ "$comparator" != "" ]; then
                local text="The url \"$url\" returns the expected status code \"$statusCode\"$portString."
                log 'passed' "$text"

                if  [ "$comparator" != "$comparison" ]; then
                    local text="The url \"$url\" does not return the given compare string \"$comparator\" (returns \"$comparison\")."
                    log 'failed' "$text"
                    return 1
                else
                    local text="The url \"$url\" returns the given compare string \"$comparator\"."
                    log 'passed' "$text"
                    return 0
                fi
            fi

            local text="The url \"$url\" returns the expected status code \"$statusCode\"$portString."
            log 'passed' "$text"
            return 0
        fi
    done

    local text="The url \"$url\" does not return the expected status code \"$expectedStatusCodes\" (returns \"$returnedStatusCode\")$portString."
    log 'failed' "$text"
    return 1
}

isDomainAssignedToIpCheck()
{
    domain="$1"
    ip="$2"

    assignedIp=$(dig A +short "$domain")

    # check passed
    if [ "$ip" == "$assignedIp" ]; then
        log 'passed' "The given domain \"$domain\" is assigned to ip \"$ip\"."
        return 0
    fi

    # check failed
    log 'failed' "The given domain \"$domain\" is not assigned to ip $ip. Assigned ip: $assignedIp"
    return 1
}

