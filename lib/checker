#!/bin/bash


isPingableCheck()
{
    ip="$1"

    if isPingable "$ip"; then
        log 'passed' "The system with ip $ip is running"
        return 0
    else
        log 'failed' "The system with ip $ip is not pingable"
        return 1
    fi
}


isPortOpenCheck()
{
    ip="$1"
    port="$2"

    if isPortOpen "$ip" "$port"; then
        log 'passed' "The port \"$port\" on system with ip \"$ip\" is open."
        return 0
    else
        log 'failed' "The port \"$port\" on system with ip \"$ip\" is not open."
        return 1
    fi
}

isNotPortOpenCheck()
{
    if ! isPortOpen "$ip" "$port"; then
        log 'passed' "The port \"$port\" on system with ip \"$ip\" is closed."
        return 0
    else
        log 'failed' "The port \"$port\" on system with ip \"$ip\" is not closed."
        return 1
    fi
}

isHttpStatusCodeCheck()
{
    local                 url="$1"
    local expectedStatusCodes="$2"

    local startFormat="$COLOR_CYAN$COLOR_BOLD"
    local urlFormatted="$startFormat$url$COLOR_NORM"

    read returnedStatusCode comparison < <(getHttpStatusCodeFromUrl "$url")
    local comparisonFormated="$startFormat$comparison$COLOR_NORM"

    # split status code
    IFS=',' read -ra statusCodeArray <<< "$expectedStatusCodes"

    local portString=""
    local statusCodeComparator
    if [ ${#statusCodeArray[@]} -gt 1 ]; then
        for statusCodeComparator in "${statusCodeArray[@]}"; do
            if [ "$portString" != "" ]; then
                portString="$portString, "
            fi

            local statusCode=$(getIndexFromStringSeparatedBySeparator "$statusCodeComparator" "=" 0)
            local statusCodeFormatted="$startFormat$statusCode$COLOR_NORM"

            portString="$portString$statusCodeFormatted"
        done
    fi

    if [ "$portString" != "" ]; then
        portString="\n(one of the expected ports: $portString)"
    fi

    # check status code and comparator
    for statusCodeComparator in "${statusCodeArray[@]}"; do

        # split status code
        local statusCode=$(getIndexFromStringSeparatedBySeparator "$statusCodeComparator" "=" 0)
        local comparator=$(getIndexFromStringSeparatedBySeparator "$statusCodeComparator" "=" 1)

        local statusCodeFormatted="$startFormat$statusCode$COLOR_NORM"
        local comparatorFormatted="$startFormat$comparator$COLOR_NORM"

        if [ "$statusCode" == "$returnedStatusCode" ]; then
            # status code match, but comparator mismatch
            if [ "$comparator" != "" ]; then
                local text="The url \"$urlFormatted\" returns the expected status code \"$statusCodeFormatted\"$portString."

                local comparisonMatch=false

                # check comparison string
                case "$statusCode" in
                    200)
                        [[ "$comparison" =~ $comparator ]] && comparisonMatch=true
                        ;;

                    *)
                        [ "$comparison" == "$comparator"  ] && comparisonMatch=true
                        ;;
                esac

                if ! $comparisonMatch; then
                    local text="$text\nThe url \"$urlFormatted\" does not return the given compare string \"$comparatorFormatted\""
                    [ ${#comparison} -gt 10 ] && text="$text\n" || text="$text "
                    text="$text(returns \"$comparisonFormated\")."
                    log 'failed' "$text"
                    return 1
                else
                    local text="$text\nThe url \"$urlFormatted\" returns the given compare string:"
                    [ ${#comparator} -gt 10 ] && text="$text\n" || text="$text "
                    text="$text\"$comparatorFormatted\"."
                    log 'passed' "$text"
                    return 0
                fi
            fi

            local text="The url \"$urlFormatted\" returns the expected status code \"$statusCodeFormatted\"$portString."
            log 'passed' "$text"
            return 0
        fi
    done

    local text="The url \"$urlFormatted\" does not return the expected status code \"$expectedStatusCodes\" (returns \"$returnedStatusCode\")$portString."
    log 'failed' "$text"
    return 1
}

isDomainAssignedToIpCheck()
{
    local domain="$1"
    local ip="$2"
    local useHostsFile=${3:-false}

    # real name to ip translation
    local assignedIp=$(dig A +short "$domain")

    # check passed
    if [ "$ip" == "$assignedIp" ]; then
        log 'passed' "The given domain \"$domain\" is assigned to ip \"$ip\"."
        return 0
    fi

    # try also to use the /etc/hosts
    if $useHostsFile; then
        assignedIp=$(getent ahostsv4 "$domain" | cut -d' ' -f1 | sort -u)

        # check passed
        if [ "$ip" == "$assignedIp" ]; then
            log 'passed' "The given domain \"$domain\" is assigned to ip \"$ip\"."
            return 0
        fi
    fi

    # check failed
    log 'failed' "The given domain \"$domain\" is not assigned to ip $ip. Assigned ip: $assignedIp"
    return 1
}

