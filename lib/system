#!/bin/bash

# ------------
# Install a given script to given install path
#
# @author  Björn Hempel
# @version 1.0
# ------------
installApp()
{
    sourceFile="$1"
    targetFile="$2"

    # inform the user
    log "info" "Try to install the given script\n$sourceFile to\n$targetFile."

    # check the given source file
    if [ ! -f "$sourceFile" ]; then
        log "error" "The given install file\n$sourceFile does not exist."
        return 1
    fi

    # check if the target file already exists
    if [ -f "$targetFile" ]; then
        log "info" "The target file\n$targetFile already exists."
        return 0
    fi

    # try to install the app
    ln -s "$sourceFile" "$targetFile"

    # error while installing pub deploy script
    if [ ! -f "$targetFile" ]; then
        log "error" "An error occurred while installing the given script\n$sourceFile\nto $targetPath"
        return 1
    fi

    # change permissions
    chmod 775 "$targetFile"

    # return true
    log "success" "The given script\n$sourceFile\nwas successfully installed to $targetPath"
    return 0
}

# ------------
# Remove a given script from given install path
#
# @author  Björn Hempel
# @version 1.0
# ------------
removeApp()
{
    sourceFile="$1"
    targetPath="$2"
    basename=$(basename "$sourceFile")
    targetFile="$targetPath/$basename"
    # inform the user
    log "info" "Try to remove the given script $targetFile."
    # check if the target file exists or not
    if [ ! -f "$targetFile" ]; then
        log "info" "The target file $targetFile is already removed or was never installed."
        return 0
    fi
    # try to remove the target file
    rm "$targetFile"
    # check if file was removed successfully
    if [ -f "$targetFile" ]; then
        return 1
    fi
    # successfully removed
    return 0
}

# ------------
# check if a given application exists
#
# @author  Björn Hempel
# @version 1.0 (2017-05-01)
# ------------
applicationExists()
{
    `which $1 >/dev/null`
}

# ------------
# Gets the name of environment. Possible values are:
# - prod    (production)
# - staging (staging)
# - dev     (development)
#
# @author  Björn Hempel
# @version 1.0
# ------------
getEnvironment()
{
    local defaultEnvironment="dev"
    # get the system ip
    local thisIp=$(getIpAddress)
    # get the parameter
    local -n envs=$1
    # try to find an environment
    for environment in "${!envs[@]}"; do
        local ip=${envs[$environment]}
        if [ "$ip" == "$thisIp" ]; then
            echo $environment
            return 0
        fi
    done
    echo "$defaultEnvironment"
    return 0
}

# ------------
# Gets the system ip address
#
# @author  Björn Hempel
# @version 1.0
# ------------
getOwnIpAddress()
{
    /sbin/ifconfig | grep -E 'inet (addr|Adresse):' | awk '{print $2}' | sed -E 's/(Adresse|addr)://' | grep -v '127.0.0.1' | grep -v '^172.' | head -n 1
}

# ------------
# Gets the number of cpus.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-14)
# ------------
getNumberOfCpus()
{
    grep pro /proc/cpuinfo -c
}

# ------------
# Gets the ram size in gb.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-14)
# ------------
getRamSizeGb()
{
    free | grep 'Mem:' | awk '{print $2/1024/1024}'
}

# ------------
# Gets the hd size in gb.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-14)
# ------------
getHdSizeGb()
{
    df -h | grep '^/dev/' | grep -v 'boot' | awk '{print $2*1}'
}

# ------------
# Gets the percent of used disc size
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-14)
# ------------
getHdUsedPercent()
{
    df -h | grep '^/dev/' | grep -v 'boot' | awk '{print $5*1}'
}

# ------------
# Return the status according the current used hd disc size.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-30)
# ------------
getHdUsedPercentStatus()
{
    local errorPercent="95"
    local  warnPercent="80"

    local currentPercent=$(getHdUsedPercent)

    if [ $currentPercent -gt $errorPercent ]; then
        echo 'critical'
        return 0
    fi

    if [ $currentPercent -gt $warnPercent ]; then
        echo 'warn'
        return 0
    fi

    echo 'ok'
    return 0
}

# ------------
# Gets the load average from the last minute.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-30)
# ------------
getLoadAverage1min()
{
    cat /proc/loadavg | awk '{print $1}'
}

# ------------
# Gets the load average from the last 5 minutes.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-30)
# ------------
getLoadAverage5min()
{
    cat /proc/loadavg | awk '{print $2}'
}

# ------------
# Gets the load average from the last 15 minutes.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-30)
# ------------
getLoadAverage15min()
{
    cat /proc/loadavg | awk '{print $3}'
}

# ------------
# Checks if the given ip is pingable.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0
# @date    2017-02-26
# ------------
isPingable()
{
    ip="$1"

    timeout 2 bash -c "ping -c 1 $ip &> /dev/null"

    if [ $? -eq 0 ]; then
        return 0
    else
        return 1
    fi
}

