#!/bin/bash

# ------------
# Get the ip address from given url
#
# @author  Björn Hempel
# @version 1.0
# ------------
getIpAddressFromUrl()
{
    echo $(getent hosts $1 | awk '{ print $1 }')
}

# ------------
# Get the status code from given url.
#
# @author  Björn Hempel
# @version 1.0
# ------------
getHttpStatusCodeFromUrl()
{
    url="$1"   

    curl -w "%{http_code}" -o /dev/null -s "$1"
}

# ------------
# Check the status code from given url.
#
# @author  Björn Hempel
# @version 1.0
# ------------
hasHttpStatusCodeFromUrl()
{
    url="$1"
    statusCodes="$2"

    returnedStatusCode=$(getHttpStatusCodeFromUrl "$url")

    IFS=',' read -ra statusCodeArray <<< "$statusCodes"
    for statusCode in "${statusCodeArray[@]}"; do
        if [ "$statusCode" == "$returnedStatusCode" ]; then
            return 0
        fi
    done

    return 1
}

# ------------
# Get the redirect url from given url.
#
# @author  Björn Hempel
# @version 1.0
# ------------
getRedirectUrlFromUrl()
{
    url="$1"

    curl -w "%{redirect_url}" -o /dev/null -s "$1"
}


# ------------
# Get the header from given url.
#
# @author  Björn Hempel
# @version 1.0
# ------------
getHeaderFromUrl()
{
    url="$1"

    curl -w "http_code:%{http_code}\nredirect_url:%{redirect_url}" -o /dev/null -s "$1"
}

# ------------
# Checks if the given port on given ip is open.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0
# @date    2017-02-26
# ------------
isPortOpen()
{
    ip="$1"
    port="$2"

    if (echo >/dev/tcp/$ip/$port) &>/dev/null; then
        return 0
    else
        return 1
    fi
}



