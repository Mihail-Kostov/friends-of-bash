#!/bin/bash

# ------------
# Get the ip address from given url
#
# @author  Björn Hempel
# @version 1.0
# ------------
getIpAddressFromUrl()
{
    echo $(getent hosts $1 | awk '{ print $1 }')
}

# ------------
# Gets the final url, if given url redirects.
# Otherwise it will return the given address.
#
# @author  Björn Hempel
# @version 1.0 (2017-06-08)
# ------------
getRedirectUrl()
{
    local url="$1"
    local  sc=0
    local  sv=""

    while true; do
        read sc sv < <(getHttpStatusCodeFromUrl "$url")

        local redirect=false

        ! $redirect && [ $sc -eq 300 ] && redirect=true
        ! $redirect && [ $sc -eq 301 ] && redirect=true
        ! $redirect && [ $sc -eq 302 ] && redirect=true
        ! $redirect && [ $sc -eq 303 ] && redirect=true
        ! $redirect && [ $sc -eq 307 ] && redirect=true
        ! $redirect && [ $sc -eq 308 ] && redirect=true

        # no redirection found → break
        ! $redirect && break

        # save new url and try again → while true
        url="$sv"
    done

    echo "$url"
}

# ------------
# Get the status code from given url.
#
# @author  Björn Hempel
# @version 1.0
# ------------
getHttpStatusCodeFromUrl()
{
    local url="$1"

    # get header
    local header=$(curl -I -s "$1")

    local   httpCode=$(echo "$header" | grep "HTTP/1." | awk '{print $2}')
    local comparison=""

    case $httpCode in
        200)
            comparison=$(curl -s "$1")
            ;;
        301)
            comparison=$(echo "$header" | grep "Location:" | awk '{print $2}' | sed 's/\/[^a-z0-9\.\-\:]*$//g' | sed -e 's/[[:space:]]*$//')
            ;;
        302)
            comparison=$(echo "$header" | grep "Location:" | awk '{print $2}' | sed 's/\/[^a-z0-9\.\-\:]*$//g' | sed -e 's/[[:space:]]*$//')
            ;;
        401)
            comparison=$(echo "$header" | grep 'WWW-Authenticate' | grep -oP 'realm="\K[^"]+')
            ;;
    esac

    echo -e "$httpCode" "$comparison"
}

# ------------
# Check the status code from given url.
#
# @author  Björn Hempel
# @version 1.0
# ------------
hasHttpStatusCodeFromUrl()
{
    url="$1"
    statusCodes="$2"

    read returnedStatusCode comparison < <(getHttpStatusCodeFromUrl "$url")

    IFS=',' read -ra statusCodeArray <<< "$statusCodes"
    for statusCode in "${statusCodeArray[@]}"; do
        if [ "$statusCode" == "$returnedStatusCode" ]; then
            return 0
        fi
    done

    return 1
}

# ------------
# Get the redirect url from given url.
#
# @author  Björn Hempel
# @version 1.0
# ------------
getRedirectUrlFromUrl()
{
    url="$1"

    curl -w "%{redirect_url}" -o /dev/null -s "$1"
}


# ------------
# Get the header from given url.
#
# @author  Björn Hempel
# @version 1.0
# ------------
getHeaderFromUrl()
{
    url="$1"

    curl -w "http_code:%{http_code}\nredirect_url:%{redirect_url}" -o /dev/null -s "$1"
}

# ------------
# Checks if the given port on given ip is open.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-02-26)
# ------------
isPortOpen()
{
    ip="$1"
    port="$2"

    timeout 2 bash -c "cat < /dev/null > /dev/tcp/$ip/$port" &> /dev/null

    if [ $? -eq 0 ]; then
        return 0
    else
        return 1
    fi
}



