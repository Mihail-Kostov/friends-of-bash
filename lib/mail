#!/bin/bash

# ------------
# Send an email.
# You can use it inside a loop. It sends only a mail,
# if the last mail is more than $timeDistance away.
#
# @author  Björn Hempel
# @version 1.0
# ------------
sendMailTimeFiltered ()
{
  local     sendMail="$1"
  local     timeFile="$2"
  local         text="$3"
  local      subject="$4"
  local    recipient="$5"
  local timeDistance=${6:-300}
  namespace="$recipient/"$(echo -ne "$text" | sha1sum | sed 's/ .*//')
     lastTimestamp=$(getLastTimeFromFile "$timeFile" "$namespace")
  currentTimestamp=$(getCurrentTimestamp)
  # the last email is not so long ago - stop here
  if [ "$(($currentTimestamp - $lastTimestamp))" -lt "$timeDistance" ]; then
    return 1
  fi
  # send email
  sudo -u service $pathScript/sendMail "$text" "$subject" "$recipient"
  # write new status
  setCurrentTimeToFile "$timeFile" "$namespace"
  # return success status
  return 0
}

# ------------
# Send error mails to given recipients. The first success mail will also be send.
#
# @author  Björn Hempel
# @version 1.0 (2017-04-19)
# ------------
sendErrorMailsTimeFiltered()
{
    local emailRelayStrategy="$1"
    local            subject="$2"
    local               text="$3"
    local         recipients="$4"
    local               from="$5"
    local            iniFile="$6"
    local          namespace="$7"
    local          errorMail=${8:-false}
    local       timeDistance=${9:-300}
    local     suppressOutput=${10:false}

    IFS=',' read -r -a recipientArray <<< "$recipients"

    local relayStrategyServer="direct"
    local relayStrategyName=""

    if [ "$emailRelayStrategy" != "direct" ]; then
        IFS=':' read -r -a emailRelayStrategyArray <<< "$emailRelayStrategy"

        if [ "${emailRelayStrategyArray[0]}" == "docker" ]; then
            relayStrategyServer="${emailRelayStrategyArray[0]}"
            relayStrategyName="${emailRelayStrategyArray[1]}"

            local statusDockerMachine=$(getDockerContainerStatus "$relayStrategyName")

            if [ "$statusDockerMachine" != "running" ]; then
                outputContentLog "info" "The docker machine is not running ($relayStrategyName)." $suppressOutput
                return 1
            fi
        else
            outputContentLog "info" "Unknown relay type \"${emailRelayStrategyArray[0]}\"." $suppressOutput
            return 1
        fi
    fi

    # check required applications
    if [ "$relayStrategyServer" == "direct" ]; then
        if ! applicationExists "mail"; then
            outputContentLog "info" "The application mail is not installed. Please install with: user$ sudo apt install mailutils"
            return 1
        fi
    fi

    for recipient in "${recipientArray[@]}"; do
        local fullNamespace="${namespace}.error:${recipient}"

        local    lastErrorTimestamp=$(getCachedValue "$iniFile" "$fullNamespace" 0)
        local currentErrorTimestamp=$(getCurrentTimestamp)

        if $errorMail; then
            # the last email was send not so long ago
            if [ "$(($currentErrorTimestamp - $lastErrorTimestamp))" -lt "$timeDistance" ]; then
                outputContentLog "info" "Ignore sending fail mail to $recipient (time out) (identifier: $namespace)." $suppressOutput
                continue;
            fi

            # send email
            if [ "$relayStrategyServer" == "direct" ]; then
                echo -ne "$text" | mail -s "FAILED: $subject" -a "From: $from" "$recipient"
            else
                echo -ne "$text" | docker exec -i "$relayStrategyName" mail -s "FAILED: $subject" -a "From: $from" "$recipient"
            fi

            # log output
            outputContentLog "info" "Send fail mail to $recipient (identifier: $namespace)." $suppressOutput

            # set sent error time
            setCachedValue "$iniFile" "$fullNamespace" $currentErrorTimestamp
        else
            # no error mail was send before → no need to send this success mail
            if [ $lastErrorTimestamp -eq 0 ]; then
                outputContentLog "info" "Ignore sending success mail to $recipient (no error mail before) (identifier: $namespace)." $suppressOutput
                continue;
            fi

            # send email
            if [ "$relayStrategyServer" == "direct" ]; then
                echo -ne "$text" | mail -s "SUCCESS: $subject" -a "From: $from" "$recipient"
            else
                echo -ne "$text" | docker exec -i "$relayStrategyName" mail -s "SUCCESS: $subject" -a "From: $from" "$recipient"
            fi

            # log output
            outputContentLog "info" "Send success mail to $recipient (identifier: $namespace)" $suppressOutput

            # reset sent error time
            setCachedValue "$iniFile" "$fullNamespace" 0
        fi
    done
}

