#!/bin/bash

# ------------
# Config parser
#
# @author  Björn Hempel
# @version 1.0
# ------------
cfgParser()
{
    # read the given file
    # print the content with:
    # $ echo "${config[*]}"
    config="$(<$1)" # read the file

    # read the config prefix
    configPrefix="${2:-conf}"

    # replace 'xyz {' into 'conf.xyz () {' and remove commented lines
    config=$(echo "${config[*]}" | sed '/^#/d' | sed -r 's/([a-zA-Z0-9/\-]+)[ ]*\{/'$configPrefix'.\1 \(\) {/g')

    # collect function names
    regex="($configPrefix.([a-zA-Z0-9/\-]+))[ ]*\(\)[ ]*\{"
    functionNames=""
    confNames=""
    while read -r configLine; do
        if [[ "$configLine" =~ $regex ]] ; then
            if [ "$functionNames" != "" ]; then
                functionNames="$functionNames "
                confNames="$confNames "
            fi
            functionNames="$functionNames${BASH_REMATCH[1]}"
            confNames="$confNames${BASH_REMATCH[2]}"
        fi
    done <<< "${config[*]}"

    # add variable with function names
    config+=($'\n')
    config+=($'\n'$configPrefix'Functions=('$functionNames')')
    config+=($'\n'$configPrefix's=('$confNames')')

    # eval the result
    # print the result with
    # $ echo "${config[*]}"
    #echo "${config[*]}"
    eval "$(echo "${config[*]}")"
}

# ------------
# Generate json index file.
#
# @author  Björn Hempel
# @version 1.0
# ------------
getJsonIndexContent()
{
    local      jsonPath="$1"
    local jsonIndexFile="$2"

    json=""

    json+="{"$'\n'
    for entry in "$jsonPath"/*.json; do
            path=$(echo "$entry")
            time=$(stat -c %Y "$entry")
             md5=$(md5sum "$entry" | awk '{ print $1 }')
        basename=$(basename "$path")

        if [ "$basename" == "$jsonIndexFile" ]; then
            continue
        fi

        json+='    {'$'\n'
        json+='        "name":      "'$path'",'$'\n'
        json+='        "updatedAt": "'$time'",'$'\n'
        json+='        "md5":       "'$md5'"'$'\n'
        json+='    }'$'\n'
    done
    json+="}"

    echo "$json"
}

# ------------
# Get the last timestamp from given namespace.
#
# @author  Björn Hempel
# @version 1.0
# ------------
getLastTimeFromFile()
{
  local file="$1"
  local namespace="$2"
  getCachedValue "$file" "$namespace" "0"
  return 0
}

# ------------
# Set the given timestamp with given namespace.
#
# @author  Björn Hempel
# @version 1.0
# ------------
setCurrentTimeToFile()
{
  local file="$1"
  local namespace="$2"
  time=$(date +%s)
  setCachedValue "$file" "$namespace" "$time"
  return 0
}

# ------------
# Get the last cached value from given namespace.
#
# @author  Björn Hempel
# @version 1.0
# ------------
getCachedValue()
{
  local file="$1"
  local namespace="$2"
  local default="${3:-0}"
  if [ ! -f "$file" ]; then
    echo "$default"
    return 0
  fi
  while read line; do
    IFS=' ' read -r -a array <<< "$line"
    if [ "$namespace" == "${array[0]}" ]; then
      echo "${array[1]}"
      return 0
    fi
  done < "$file"
  echo "$default"
  return 0
}

# ------------
# Set the given value with given namespace.
#
# @author  Björn Hempel
# @version 1.0
# ------------
setCachedValue()
{
    local file="$1"
    local namespace="$2"
    local value="$3"

    # create folder
    [ ! -d "$(dirname $file)" ] && mkdir -p "$(dirname $file)"

    # touch file
    [ ! -f "$file" ] && touch "$file"

    local counter=0
    while read line; do
        ((counter++))

        IFS=' ' read -r -a array <<< "$line"

        if [ "$namespace" == "${array[0]}" ]; then
            removeLineFromFile "$file" $counter
        fi
    done < "$file"

    if [ "$value" != "" ]; then
        filesize=$(stat --printf="%s" "$file")

        if [ "$filesize" -gt 0 ]; then
            echo "$namespace $value" >> "$file"
        else
            echo "$namespace $value" > "$file"
        fi
    fi

    return 0
}

# ------------
# Remove the given linenumber from file.
#
# @author  Björn Hempel
# @version 1.0
# ------------
removeLineFromFile()
{
  local file="$1"
  local line="$2"

  if [ ! -f "$file" ]; then
    touch "$file"
    return 0
  fi

  result=$(sed $line' d' "$file")
  echo -e "$result" > "$file.tmp"

  # remove empty lines
  grep -v '^$' "$file.tmp" > "$file"
  rm "$file.tmp"
}

# ------------
# Executes a given script
#
# @author  Björn Hempel
# @version 1.0
# @date    2017-01-26
# ------------
executeScript()
{
    local script="$1"

    # check start script
    if [ -f "$script" ]; then
        source "$script"
    fi
}

# ------------
# Returns the content from a given file from line $lineFrom to the first match
# string $matchString or until the end of the file.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-12)
# ------------
getContentFromLineToMatch()
{
    local        file="$1"
    local    lineFrom=$2
    local matchString="$3"
    local  dockerName="$4"

    # check if file exists
    if ! fileExistsLocallyOrOnDocker "$file" "$dockerName"; then
        echo -n "" && return 1
    fi

    # helper variables
    local         lines=0
    local         found=false
    local    serverRoot='/etc/apache2'
    local possibleLines=$(executeLocallyOrOnDocker "cat \"$file\" | tail -n+$lineFrom" "$dockerName")

    possibleLines=$(echo "$possibleLines" | wc -l)

    # try to catch the comment as well
    while [ $lineFrom -gt 1 ]; do
        local currentLine=$(tail -n+$((lineFrom-1)) "$file" | head -n1)

        # we want this line (empty lines or commented out lines)
        if [[ "$currentLine" =~ ^([[:space:]])*$ ]] || [[ "$currentLine" =~ ^([[:space:]])*# ]]; then
            ((lineFrom--))
            ((lines++))
            ((possibleLines++))
        else
            break;
        fi
    done

    # try to find the end tag of VirtualHost (</VirtualHost>)
    if [ $possibleLines -gt 0 ]; then
        while ! $found; do
            ((lines++))

            if [ "$dockerName" != "" ]; then
                local content=$(docker exec -it $dockerName cat "$file" | tail -n+$lineFrom | head -n$lines)
            else
                local content=$(tail -n+$lineFrom "$file" | head -n$lines)
            fi

            # $matchString found -> stop here
            [[ "$content" =~ "$matchString" ]] && found=true

            # end of file reached
            [ $lines -ge $possibleLines ] && found=true
        done
    fi

    echo "$content" && return 0
}

