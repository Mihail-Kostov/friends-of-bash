#!/bin/bash

# ------------
# Gets the certificate of given domain
#
# @author  Björn Hempel
# @version 1.0
# 
# ------------
getDomainCert()
{
    local domain="$1"

    openssl s_client -connect $domain:443 -servername $domain 2>&1 < /dev/null | \
        sed -n '/-----BEGIN/,/-----END/p'
}

# ------------
# Gets the issuer of given domain
#
# @author  Björn Hempel
# @version 1.0
# ------------
getIssuer()
{
    local domain="$1"

    openssl s_client -connect $domain:443 -servername $domain 2>&1 < /dev/null | \
        sed -n '/-----BEGIN/,/-----END/p' | \
        openssl x509 -noout -issuer | sed -r 's/^issuer= //'
}

# ------------
# Gets the chain certificate
#
# @author  Björn Hempel
# @version 1.0
# ------------
getChainCertificate()
{
    local domain="$1"

    local issuer=$(getIssuer "$domain")

    issuer=$(echo "$issuer" | sed 's/\//\\\//g')

    local chainCert=$(openssl s_client -connect $domain:443 -showcerts -servername $domain 2>/dev/null < /dev/null | sed -n "/s:$issuer/,/-----END/p" | sed -n '/-----BEGIN/,/-----END/p')

    echo "$chainCert"
}

# ------------
# Verifies the given certificate.
#
# @author  Björn Hempel
# @version 1.0
# ------------
isCertificateVerified()
{
    local certificateFile="$1"
    local chainFile="$2"
    local domain="$3"
    local printStatus=${4:-false}
    local domainUnderlined=$(getUnderlinedString "$domain")
    local status=$(openssl verify -CAfile "$chainFile" "$certificateFile" | grep ": OK")

    if [ "$status" != "" ]; then
        if $printStatus; then
            outputContent \
                "certificates.${domainUnderlined}.verified" \
                "passed" \
                "The certificate from the domain \"$domain\" was successfully verified."
        fi
        return 0
    fi

    if $printStatus; then
        outputContent \
            "certificates.${domainUnderlined}.verified" \
            "failed" \
            "The certificate from the domain \"$domain\" was not successfully verified."
    fi
    return 1
}

# ------------
# Returns the number of valid days of given certificate.
#
# @author  Björn Hempel
# @version 1.0 (2017-06-12)
# ------------
getCertificateValidDays()
{
    local certificateFile="$1"

    # check certificate date
    local         currentTimestamp=$(getCurrentTimestamp)
    local      validUntilTimestamp=$(getValidUntilFromCertificate "$certificateFile" true)
    local     differenceValidUntil=$((validUntilTimestamp-currentTimestamp))
    local differenceValidUntilDays=$((differenceValidUntil/60/60/24))

    echo "$differenceValidUntilDays"
}

# ------------
# Returns the status of valid days of given certificate.
#
# @author  Björn Hempel
# @version 1.0 (2017-06-12)
# ------------
getCertificateValidStatus()
{
    local certificateFile="$1"
    local    criticalDays=${2:-7}
    local     warningDays=${3:-14}

    local certificateValidDays=$(getCertificateValidDays "$certificateFile")

    if [ $certificateValidDays -le $criticalDays ]; then
        echo 'critical'
        return 2
    fi

    if [ $certificateValidDays -le $warningDays ]; then
        echo 'warn'
        return 1
    fi

    echo 'ok'
    return 0
}

# ------------
# Checks the validity fo the given certificate.
#
# @author  Björn Hempel
# @version 1.0 (2017-03-11)
# ------------
isCertificateValid()
{
    local certificateFile="$1"
    local domain="$2"
    local warningDays="${3:-14}"
    local printStatus=${4:-false}
    local domainUnderlined=$(getUnderlinedString "$domain")

    # check certificate date
            currentTimestamp=$(getCurrentTimestamp)
         validUntilTimestamp=$(getValidUntilFromCertificate "$certificateFile" true)
        differenceValidUntil=$((validUntilTimestamp-currentTimestamp))
    differenceValidUntilDays=$((differenceValidUntil/60/60/24))

    validUntilFormated=$(date --date @$validUntilTimestamp +"%Y-%m-%d %H:%M")

    # certificate is valid more than $warningDays days
    if [ $differenceValidUntilDays -gt $warningDays ]; then
        if $printStatus; then
            outputContent \
                "certificates.${domainUnderlined}.valid" \
                "passed" \
                "The certificate from the domain \"$domain\" is valid until \"$COLOR_GREEN$COLOR_BOLD$validUntilFormated$COLOR_NORM\" (still $differenceValidUntilDays days)."
        fi
        return 0
    fi

    # certificate is valid less then $warningDays days
    if [ $differenceValidUntilDays -gt 0 ]; then
        if $printStatus; then
            outputContent \
                "certificates.${domainUnderlined}.valid" \
                "warning" \
                "The certificate from the domain \"$domain\" is only valid until \"$COLOR_YELLOW$COLOR_BOLD$validUntilFormated$COLOR_NORM\" (still $differenceValidUntilDays days)."
        fi
        return 0;
    fi

    # certificate is expired.
    if $printStatus; then
        local sinceDifferenceValidUntilDays=$((-1*$differenceValidUntilDays))

        outputContent \
            "certificates.${domainUnderlined}.valid" \
            "failed" \
            "The certificate from the domain \"$domain\" is not invalid. Expired at \"$COLOR_RED$COLOR_BOLD$validUntilFormated$COLOR_NORM\" (since $sinceDifferenceValidUntilDays days)."
    fi
    return 1
}

# ------------
# Verifies the given chain certificate.
#
# @author  Björn Hempel
# @version 1.0 (2017-06-12)
# ------------
isChainCertificateVerified()
{
    local chainFile="$1"
    local issuer="$2"
    local domain="$3"
    local printStatus=${4:-false}
    local domainUnderlined=$(getUnderlinedString "$domain")   

    local status=$(openssl verify "$chainFile" | grep ": OK")

    if [ "$status" != "" ]; then
        if $printStatus; then
            outputContent \
                "certificates.${domainUnderlined}.chain" \
                "passed" \
                "The chainfile from the issuer\n\"$issuer\"\nwas successfully verified."
        fi
        return 0;
    fi

    if $printStatus; then
        outputContent \
            "certificates.${domainUnderlined}.chain" \
            "failed" \
            "The chainfile from the issuer\n\"$issuer\"\nwas not successfully verified."
    fi
    return 1
}

# ------------
# Gets the ocsp uri
#
# @author  Björn Hempel
# @version 1.0
# ------------
getOcspUri()
{
    local domain="$1"

    echo "$(getDomainCert $domain)" | openssl x509 -noout -ocsp_uri
}

# ------------
# Gets the ocsp uri
#
# @author  Björn Hempel
# @version 1.0
# ------------
isStatusOcspOk()
{
    local domain="$1"
    local chainfile="$2"
    local certFile="$3"
    local printStatus=${4:-false}
    local ocspUri=$(getOcspUri "$domain")
    local ocspHostname=$(getHostnameFromUrl $ocspUri)
    local domainUnderlined=$(getUnderlinedString "$domain")

    local status=$(openssl ocsp -issuer "$chainfile" -cert "$certFile" -url "$ocspUri" -CAfile "$chainfile" -verify_other "$chainfile" -header "HOST" "$ocspHostname" 2>&1)

    status=$(echo "$status" | grep "Response verify OK")

    if [ "$status" != "" ]; then
        if $printStatus; then
            outputContent \
                "certificates.${domainUnderlined}.ocsp" \
                "passed" \
                "The ocsp is activated on domain \"$domain\" (\"$ocspUri\")."
        fi
        return 0
    fi

    if $printStatus; then
        outputContent \
            "certificates.${domainUnderlined}.ocsp" \
            "failed" \
            "The ocsp is not activated on domain \"$domain\" (\"$ocspUri\")."
    fi
    return 1
}

# ------------
# Gets the valid until gmt date of the given certificate
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-03-11)
# ------------
getValidUntilFromCertificate()
{
    local certificateFile="$1"
    local timestamp=${2:-false}
  
    local validUntil=$(openssl x509 -noout -dates -in "$certificateFile" | \
        grep 'notAfter=' | \
        sed "s/.*notAfter=*//")

    if $timestamp; then
        validUntil=$(getTimestampFromDate "$validUntil")
    fi

    echo "$validUntil"
}

# ------------
# Gets the domain name from given certificate file
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-03-12)
# ------------
getDomainFromCertificate()
{
    local certificateFile="$1"

    local owner=$(openssl x509 -noout -subject -in "$certificateFile")

    if [[ "$owner" =~ CN=(.+)$ ]]; then
        echo ${BASH_REMATCH[1]};
        return 0
    fi

    echo ""
    return 1
}

# ------------
# Get the domain names from given certificate file
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-06-13)
# ------------
getDomainsFromCertificate()
{
    local certificateFile="$1"

    local certificates=$(openssl x509 -noout -text -in "$certificateFile" | awk '/X509v3 Subject Alternative Name/ {getline;gsub(/ /, "", $0); print}' | tr -d "DNS:")
    local certificate=""

    certificate=$(getDomainFromCertificate "$certificateFile")

    if [ "$certificate" != "" ]; then
        certificates=$(echo "$certificates,$certificate")
    fi

    certificates=$(echo "$certificates" | tr ',' "\n" | sort -u)

    echo "$certificates"
}

# ------------
# Checks if the given domain matches with the certificate file
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-03-12)
# ------------
isDomainFromCertificate()
{
    local domain="$1"
    local certificateFile="$2"
    local printStatus=${3:-false}
    local domainUnderlined=$(getUnderlinedString "$domain")

    local domainsCertificate=$(getDomainsFromCertificate "$certificateFile")

    IFS=$'\n'
    for domainCertificate in $domainsCertificate; do
        if [ "$domain" == "$domainCertificate" ]; then
            if $printStatus; then
                outputContent \
                    "certificates.${domainUnderlined}.domainName" \
                    "passed" \
                    "The domain \"$domain\" validate the domain name in certificate file."
            fi
            return 0
        fi
    done

    if $printStatus; then
        outputContent \
            "certificates.${domainUnderlined}.domainName" \
            "failed" \
            "The domain \"$domain\" differs from the domain name in certificate file (\"$certificateFile\" returns \"$domainCertificate\")."
    fi
    return 1
}

