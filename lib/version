#!/bin/bash

   BASH_LIB_NAME="friends-of-bash lib"
BASH_LIB_VERSION="1.0"


# ------------
# Compares two given version strings
#
# result could be
# 0 - the versions are equal
# 1 - the first given version is greater then the second one
# 2 - the second given version is lower than the second one
#
# @author  Björn Hempel
# @version 1.0 (2017-05-21)
# ------------
compareVersions()
{
    # remove unallowed signes
    local version1=$(echo "$1" | sed 's/[^0-9.]//ig')
    local version2=$(echo "$2" | sed 's/[^0-9.]//ig')

    # equal versions
    if [[ "$version1" == "$version2" ]]; then
        return 0
    fi

    local IFS=.
    local i version1=($version1) version2=($version2)

    # fill empty fields in version1 with zeros
    for ((i=${#version1[@]}; i<${#version2[@]}; i++)); do
        version1[i]=0
    done

    # compare the versions
    for ((i=0; i<${#version1[@]}; i++)); do
        # fill empty fields in version2 with zeros
        if [[ -z ${version2[i]} ]]; then
            version2[i]=0
        fi

        # version 1 is greater then version 2
        if ((10#${version1[i]} > 10#${version2[i]})); then
            return 1
        fi

        # version 2 is greater then version 1
        if ((10#${version1[i]} < 10#${version2[i]})); then
            return 2
        fi
    done

    # normally this should not be happened
    return 0
}

# ------------
# Compares the app versions from given .require file with the current app versions from system.
#
# Returns 0 if the comparisons are passed.
# Returns 1 if at least one version number is not passed.
# Returns 2 if at least one app is currently not installed.
# Returns 3 if the given .require path does not exist.
# Returns 4 while catching another error.
#
# @author  Björn Hempel
# @version 1.0 (2017-07-06)
# ------------
checkCurrentVersionNumbers()
{
    local requirePath="$1"

    # check require path
    if [ ! -f "$requirePath" ]; then
        echo "The given .require file \"$requirePath\" was not found."
        return 3
    fi

    IFS=$'\n' read -r -d '' -a requiredApps < <(jq -r 'keys[]' "$requirePath")

    for requiredApp in "${requiredApps[@]}"; do
        if ! applicationExists "$requiredApp"; then
            echo "Application \"$requiredApp\" is not installed. Please install it before continuing."
            return 2
        fi

        # get current and needed version number
        local versionCurrent=$($requiredApp --version | sed 's~^[^/]\+/~~gi' | sed 's/[^0-9.]//ig')
        local versionRequieredApp=$(jq -r '."'$requiredApp'"' "$pathRoot/.require")

        # extract compare parameter from needed version number
        local compare='>='
        if [[ "$versionRequieredApp" =~ ^([^0-9]+)(.+) ]]; then
            compare="${BASH_REMATCH[1]}"
            versionRequieredApp="${BASH_REMATCH[2]}"
        fi

        # compare the current and needed version number.
        $(compareVersions "$versionCurrent" "$versionRequieredApp")
        local lastStatus=$?

        case $compare in
            ">=")
                if [ $lastStatus -eq 2 ]; then
                    echo -n "At least version \"$versionRequieredApp\" from application \"$requiredApp\" is required. "
                    echo -n "Application \"$requiredApp\" currently has version \"$versionCurrent\". "
                    echo    "Please update before continuing."
                    return 1
                fi
                ;;

            *)
                echo "Unknown compare status \"$compare\"."
                return 4
                ;;
        esac
    done

    return 0
}

# ------------
# Given first version is greater then the second one.
#
# @author  Björn Hempel
# @version 1.0 (2017-05-21)
# ------------
compareVersionIsGreater ()
{
    compareVersions "$1" "$2"

    lastStatus=$?

    if [ $lastStatus -eq 1 ]; then
        return 0
    fi

    return 1
}


