#!/bin/bash

# ------------
# Friends of Ba$h. A collection of useful bash functions. Easy to include in your bash scripts.
#
# @author    Björn Hempel <bjoern@hempel.li>
# @version   v0.0.45 (2017-07-16)
#
# @copyright MIT License
# @copyright
# @copyright Copyright (c) 2017 Björn Hempel
# @copyright
# @copyright Permission is hereby granted, free of charge, to any person obtaining a copy
# @copyright of this software and associated documentation files (the "Software"), to deal
# @copyright in the Software without restriction, including without limitation the rights
# @copyright to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# @copyright copies of the Software, and to permit persons to whom the Software is
# @copyright furnished to do so, subject to the following conditions:
# @copyright
# @copyright The above copyright notice and this permission notice shall be included in all
# @copyright copies or substantial portions of the Software.
# @copyright
# @copyright THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# @copyright IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# @copyright FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# @copyright AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# @copyright LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# @copyright OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# @copyright SOFTWARE.
# @copyright
# @copyright Written by Björn Hempel <bjoern@hempel.li>.
# ------------

# trap ctrl-c and call ctrl_c()
trap ctrlC INT

# trap ctrl-c function
function ctrlC()
{
    echo && log 'info' "Script was cancelled by user (ctrl-c)."
    exit 0
}

# some user definable constants
TARGET_FOLDER="/opt/friends-of-bash"
EXECUTIVE_FOLDER="/usr/local/bin"

# some calculable configs before
if [ -h "${BASH_SOURCE[0]}" ]; then
    realScriptname=$(readlink "${BASH_SOURCE[0]}")
    pathRoot=$(dirname "$realScriptname")
    scriptname="${BASH_SOURCE[0]}"
else
    scriptname="$0"
    pathRoot="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
fi

# because we are inside the bin folder
pathRoot=$(dirname "$pathRoot")

# include the complete friends of bash library and some other libraries
source "$pathRoot/lib/all"
source "$pathRoot/helper/functions"

# check the current target path
executionPathIsTarget=false
if [[ "$pathRoot" =~ "$TARGET_FOLDER" ]]; then
    executionPathIsTarget=true
fi

# set unknown execution type
if $executionPathIsTarget; then
    executionType="getItFromCommandLineArgument"
fi

# set execution name
executionName=""

# include the argument checker
source "$pathRoot/helper/arguments"

# execute function according the execution type
case $executionType in
    install)
        install "$pathRoot" "$executionName"
        ;;

    status)
        status "$pathRoot" "$executionName"
        ;;

    version)
        version "$pathRoot" "$executionName"
        ;;

    update)
        update "$pathRoot" "$executionName"
        ;;

    list)
        list "$pathRoot"
        ;;

    updateAvailable)
        updateAvailable "$pathRoot" "$executionName"
        ;;

    updateVersion)
        updateVersion "$pathRoot" "$executionName"
        ;;

    osName)
        osName
        ;;

    # other character
    *)
        echo 'unknown execution type'
        ;;

esac


