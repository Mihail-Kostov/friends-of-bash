#!/bin/bash

# initial values
if [ -z $executionType ]; then
    executionType="install"
fi

# author settings
AUTHOR="Bj√∂rn Hempel"
EMAIL="bjoern@hempel.li"

# initial values
FORCE_UPDATE=false
SHORT_OUTPUT=false

# declare parameter list array
PARAMETERS=()

# read arguments
# help:
# help: "friends of bash": A bash function library (%version%) by %author% <%email%>.
# help:
# help: Usage: %scriptname% [options...] {install|status|update|version|list|updateAvailable}
while [[ $# > 0 ]]; do
    case "$1" in
        # help:  -y,    --yes                     Auto yes. Don't answer to update questions.
        # help:
        -y|--yes)
            FORCE_UPDATE=true
            ;;

        # help:  -s,    --short                   Try to shorten the output.
        # help:
        -s|--short)
            SHORT_OUTPUT=true
            ;;

        # help:  -h,    --help                    Shows this help.
        # help:
        -h|--help)
            version=$(getRepositoryVersion "$pathRoot" true)
            cat "$BASH_SOURCE" | grep "# help:" | grep -v 'cat parameter' | sed 's/[ ]*# help:[ ]\?//g' | \
                sed "s~%scriptname%~$scriptname~g" | \
                sed "s~%version%~$version~g" | \
                sed "s~%author%~$AUTHOR~g" | \
                sed "s~%email%~$EMAIL~g"
            exit 0
            ;;

        # help:  -v,    --version                 Shows the version number.
        # help:
        -v|--version)
            [ "$(type -t showVersion)" == "function" ] && showVersion || echo "Create a showVersion function to show some text here."
            exit 0
            ;;

        #
        # collect all unknown parameters
        #
        *)
            PARAMETERS+=("$1")
            ;;
    esac
    shift
done

# assign mode to executionType var
if [ ! -z ${PARAMETERS[0]} ]; then
    executionType="${PARAMETERS[0]}"
fi

# assign mode to executionName var
if [ ! -z ${PARAMETERS[1]} ]; then
    executionName="${PARAMETERS[1]}"
fi

